# Rust
# Generated by Cargo
# will have compiled files and executables
/target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
# For applications, keep Cargo.lock in version control
# For libraries, add Cargo.lock to .gitignore

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# IDE and Editor files
.vscode/
.idea/
*.swp
*.swo
*~
.DS_Store

# OS generated files
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# Logs
*.log
logs/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Build artifacts
dist/
build/
out/

# Temporary files
tmp/
temp/
*.tmp
*.temp

# Coverage reports
coverage/
*.profraw
*.profdata

# Benchmark results
bench/
criterion/

# Documentation build
book/

# Flamegraph files
flamegraph.svg
perf.data
perf.data.old

# Node.js (if you have any frontend components)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
yarn.lock

# Database files
*.db
*.sqlite
*.sqlite3

# Configuration files with sensitive data
config.json
secrets.json

# Docker and Kubernetes
.dockerignore.bak
k8s/deployment.yaml.bak
*.bak

# Kubernetes secrets and sensitive files
k8s/secrets/
k8s/*-secret.yaml
k8s/configmap-*.yaml
helm-values-*.yaml

# Container registry credentials
.docker/config.json
docker-compose.override.yml
